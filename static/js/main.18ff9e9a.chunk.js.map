{"version":3,"sources":["components/Header.js","components/Button.js","App.js","reportWebVitals.js","index.js"],"names":["Header","title","buttonList","className","Button","color","text","onClick","style","backgroundColor","defaultProps","showItems","items","document","getElementById","innerHTML","JSON","stringify","App","useState","itemData","setItemData","loading","setLoading","currentPage","setCurrentPage","perPage","setPerPage","totalPages","setTotalPages","stadiums","require","useEffect","page","per_page","total_pages","extractPageData","setTimeout","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wnXASeA,EATA,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,MAAuB,EAAhBC,WACpB,OACI,wBAAQC,UAAU,SAAlB,SACI,mCAAMF,EAAN,UCHNG,EAAS,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAC7B,OACE,wBACEA,QAASA,EACTC,MAAO,CAAEC,gBAAiBJ,GAC1BF,UAAU,MAHZ,SAKGG,KAKPF,EAAOM,aAAe,CAClBL,MAAO,SAIID,Q,YCTf,SAASO,EAAUC,GACjBC,SAASC,eAAe,OAAOC,UAA/B,4IAMWC,KAAKC,UAAUL,EAAO,KAAM,GANvC,oCAiBF,IAmFeM,EAnFH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACTC,EADS,KACCC,EADD,OAEcF,oBAAS,GAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGsBJ,mBAAS,GAH/B,mBAGTK,EAHS,KAGIC,EAHJ,OAIcN,mBAAS,IAJvB,mBAITO,EAJS,KAIAC,EAJA,OAKoBR,mBAAS,GAL7B,mBAKTS,EALS,KAKGC,EALH,KAOVC,EAAWC,EAAQ,IAUzBC,qBAAU,YACgB,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,YAAavB,EAAY,EAAZA,MACtDa,EAAeQ,GACfN,EAAWO,GACXL,EAAcM,GACdd,EAAYT,GAGdwB,CAAgBN,GAEhBnB,EAAUS,KAMT,IAyBH,OACE,sBAAKjB,UAAU,YAAf,UACE,cAAC,EAAD,CAAQF,MAAO,kBAAmBC,WAAY,KAC9C,cAAC,EAAD,CACEG,MAAOiB,EAAU,MAAQ,QACzBhB,KAAMgB,EAAU,aAAe,eAC/Bf,QAlBU,WACdgB,GAAW,GAEXc,YAAW,WACTC,QAAQC,IAAI,8BACZhB,GAAW,KACV,KAEHZ,EAAUS,MAYR,8BACA,+BACGJ,KAAKC,UACJ,CACEO,cACAE,UACAE,cAEF,KACA,WCzFKY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtC,SAASC,eAAe,SAM1B0B,M","file":"static/js/main.18ff9e9a.chunk.js","sourcesContent":["const Header = ({title, buttonList}) => {\n    return (\n        <header className='header'>\n            <h1> {title} </h1>\n            \n        </header>\n    )\n}\n\nexport default Header\n","const Button = ({ color, text, onClick }) => {\n  return (\n    <button\n      onClick={onClick}\n      style={{ backgroundColor: color }}\n      className=\"btn\"\n    >\n      {text}\n    </button>\n  );\n};\n\nButton.defaultProps = {\n    color: 'apple',\n}\n\n\nexport default Button;\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\nimport Button from \"./components/Button\";\nimport axios from \"axios\";\n\nimport \"./App.css\";\n\n\nfunction showItems(items) {\n  document.getElementById('res').innerHTML = `\n  <div class=\"container mt-3\">\n    <div class=\"card-header\">\n      Items\n    </div>\n    <div class=\"card-body\">\n      <pre>${JSON.stringify(items, null, 2)}</pre>\n    </div>\n  </div>\n  `\n}\n\n\n{/* <pre>${JSON.stringify(items)}</pre> */}\n// \n\n\nconst App = () => {\n  const [itemData, setItemData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [perPage, setPerPage] = useState(25);\n  const [totalPages, setTotalPages] = useState(1);\n\n  const stadiums = require(\"./data/stadiums.json\");\n\n  // const extractPageData = ({page, per_page, total_pages}) => {\n  //   setCurrentPage(page);\n  //   setPerPage(per_page);\n  //   setTotalPages(total_pages);\n  // }\n\n  // load locally-stored GETstadiums response data\n  // TODO: actually fetch live data from theshow api\n  useEffect(() => {\n    const extractPageData = ({ page, per_page, total_pages, items }) => {\n      setCurrentPage(page);\n      setPerPage(per_page);\n      setTotalPages(total_pages);\n      setItemData(items);\n    };\n\n    extractPageData(stadiums);\n\n    showItems(itemData);\n    // console.log(items);\n    \n    // console.log(currentPage,\n    //   perPage,\n    //   totalPages)\n  }, []);\n\n  //   JSON.stringify(\n  //     {\n  // currentPage,\n  // perPage,\n  // totalPages\n  //     },\n  //     null,\n  //     2\n  //   )\n  // )\n\n  const onClick = () => {\n    setLoading(true);\n\n    setTimeout(() => {\n      console.log(\"hopefully getting stadiums\");\n      setLoading(false);\n    }, 500);\n\n    showItems(itemData);\n    // setLoading(!loading)\n  };\n\n  return (\n    <div className=\"container\">\n      <Header title={\"show-market-app\"} buttonList={[]} />\n      <Button\n        color={loading ? \"red\" : \"green\"}\n        text={loading ? \"Loading...\" : \"GET Stadiums\"}\n        onClick={onClick}\n      />\n      <div>\n      <code>\n        {JSON.stringify(\n          {\n            currentPage,\n            perPage,\n            totalPages,\n          },\n          null,\n          2\n        )}\n      </code>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}